/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package inventory_management_system;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class PH_PAYMENT extends javax.swing.JFrame {
    
    private Connection conn;
    private PreparedStatement stm;
    private ResultSet rs;

    /**
     * Creates new form PH_PAYMENT
     */
    public PH_PAYMENT() {
        initComponents();
     setupButtonShortcuts();
     
        
    }
    
    public void updateChange(String change2){
    
    
    change.setText(change2);
    
    }
    
    
    public void cashUpdate(String cashs){
        cash.setText(cashs);
    }

    
    public void setDataToJTable1(DefaultTableModel dataModel) {
    jTable1.setModel(dataModel);
    }
    
    public void updateData(String pId){
    
        PID.setText(pId);
    
    }   
    
    public void updateTamount(String tamount){
    
        tamount1.setText(tamount);
    
    
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        PID = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tamount1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cash = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        change = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        jPanel4.setBackground(new java.awt.Color(0, 51, 255));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("PAYMENT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(165, 165, 165))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 255, 255));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("GungsuhChe", 1, 18)); // NOI18N
        jLabel6.setText("D&J|PHARMACY INVENTORY MANAGEMENT SYSTEM");

        jLabel8.setFont(new java.awt.Font("Californian FB", 0, 12)); // NOI18N
        jLabel8.setText("Barangay Villareal, Bayawan City, Negros Oriental, Philippines 6114");

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-close-35 (1).png"))); // NOI18N
        jLabel9.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
        });

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/icons8-minimize-50 (1).png"))); // NOI18N
        jLabel10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel10MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel6))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel8)))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addGap(7, 7, 7)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("total amount:");

        tamount1.setEditable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("cash:");

        cash.setEditable(false);
        cash.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cashKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("change:");

        change.setEditable(false);
        change.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                changeComponentShown(evt);
            }
        });
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setText("Cancel");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton2.setText("Pay");
        jButton2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jButton2KeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tamount1)
                            .addComponent(change)
                            .addComponent(cash, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(161, 161, 161)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tamount1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel2)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cash, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(39, 39, 39)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            try {
                Connection conn;
                ResultSet rs;
                com.mysql.jdbc.PreparedStatement stm;

                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql:///psystem", "root", "");

                String take = "SELECT * FROM pharmacists_inf WHERE PHAR_ID = ?";
                stm = (com.mysql.jdbc.PreparedStatement) conn.prepareStatement(take);
                stm.setString(1,PID.getText());
                rs = stm.executeQuery();

                PreparedStatement pstmt = conn.prepareStatement("INSERT INTO trans_history (PHAR_ID, PHAR_NAME, TRANS_DATE, TRANS_TIME, TOTAL_PRICE,TRANS_CASH ,TRANS_CHANGE) VALUES (?, ?, ?, ?, ?, ?, ?)");
                while (rs.next()) {
                    pstmt.setString(1, rs.getString("PHAR_ID"));
                    pstmt.setString(2, rs.getString("PHAR_FNAME")+"  "+rs.getString("PHAR_LNAME"));
                    pstmt.setDate(3, java.sql.Date.valueOf(LocalDate.now()));
                    pstmt.setTime(4, java.sql.Time.valueOf(LocalTime.now()));
                    pstmt.setString(5, tamount1.getText());
                    pstmt.setString(6, cash.getText());
                    pstmt.setString(7, change.getText());
                    pstmt.executeUpdate();
                }

                int columnIndex = 0;
                for (int i = 0; i < model.getRowCount(); i++) {
                    String id = model.getValueAt(i, columnIndex).toString();
                    String sql = "SELECT * FROM med_inventory WHERE MED_ID = ?";
                    stm = (com.mysql.jdbc.PreparedStatement) conn.prepareStatement(sql);
                    stm.setString(1, id);
                    rs = stm.executeQuery();

                    if (rs.next()) {
                        int availableQuantity = rs.getInt("MED_QUANTITY");
                        int requestedQuantity = Integer.parseInt(model.getValueAt(i, 1).toString());

                        if (requestedQuantity <= availableQuantity) {
                            String updateSql = "UPDATE med_inventory SET MED_QUANTITY = ? WHERE MED_ID = ?";
                            PreparedStatement updateStm = conn.prepareStatement(updateSql);
                            updateStm.setInt(1, availableQuantity - requestedQuantity);
                            updateStm.setString(2, id);
                            updateStm.executeUpdate();

                            int quantityRemaining = availableQuantity - requestedQuantity;

                            if (quantityRemaining == 0) {
                                String updateQuery = "UPDATE med_inventory SET MED_STATUS = 'Unavailable' WHERE MED_ID = ?";
                                PreparedStatement pst = conn.prepareStatement(updateQuery);
                                pst.setString(1, id);
                                pst.executeUpdate();
                            }

                            PreparedStatement insmed = conn.prepareStatement("INSERT INTO med_purchased (MED_ID, MED_NAME, QUANTITY, MED_PRICE, TRANS_ID) VALUES (?, ?, ?, ?, ?)");
                            rs.beforeFirst();
                            while (rs.next()) {
                                insmed.setString(1, rs.getString("MED_ID"));
                                insmed.setString(2, rs.getString("MED_NAME"));
                                insmed.setInt(3, requestedQuantity);
                                insmed.setString(4, rs.getString("MED_PRICE"));

                                String taketid = "SELECT * FROM trans_history WHERE TRANS_ID = (SELECT MAX(TRANS_ID) FROM trans_history)";
                                stm = (com.mysql.jdbc.PreparedStatement) conn.prepareStatement(taketid);
                                ResultSet rs2 = stm.executeQuery();
                                if (rs2.next()) {
                                    insmed.setString(5, rs2.getString("TRANS_ID"));
                                }

                                insmed.executeUpdate();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Insufficient medicine " + id + " in inventory");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Medicine with ID " + id + " not found in inventory");
                    }
                }

                model.setRowCount(0);
                dispose();
                new PH_RECEIPT().setVisible(true);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            String sql = "SELECT * FROM pharmacists_inf WHERE PHAR_ID = ?";
            String getUserInfo = "SELECT * FROM pharmacists_inf WHERE PHAR_ID = ?";
            String insertActivity = "INSERT INTO activity_history (PHAR_ID, PHAR_USERNAME, PHAR_NAME, PHAR_POS, ACT_DATE, ACT_TIME, ACT_ACTION) VALUES (?,?,?,?,?,?,?)";

            try {
                

                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql:///psystem", "root", "");
                stm = conn.prepareStatement(sql);
                stm.setString(1, PID.getText());
                rs = stm.executeQuery();

                    
                
                    if (rs.next()) {
                        String id = rs.getString("PHAR_ID");
                        String username = rs.getString("PHAR_USERNAME");
                        String fullName = rs.getString("PHAR_FNAME") + " " + rs.getString("PHAR_LNAME");
                        String position = rs.getString("PHAR_POS");

                        stm = conn.prepareStatement(insertActivity);
                        stm.setString(1, id);
                        stm.setString(2, username);
                        stm.setString(3, fullName);
                        stm.setString(4, position);
                        stm.setDate(5, java.sql.Date.valueOf(LocalDate.now()));
                        stm.setTime(6, java.sql.Time.valueOf(LocalTime.now()));
                        stm.setString(7, "Sold item from inventory");

                        int rowsInserted1 = stm.executeUpdate();

                    } else {
                        JOptionPane.showMessageDialog(null, "Error adding activity");
                    }
                
            }
             catch (SQLException ex) {
            Logger.getLogger(PH_PAYMENT.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PH_PAYMENT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    
    
    
     private void setupButtonShortcut(javax.swing.JButton button, int keyCode) {
 int condition = JComponent.WHEN_IN_FOCUSED_WINDOW;
    InputMap inputMap = button.getInputMap(condition);
    ActionMap actionMap = button.getActionMap();

    KeyStroke keyStroke = KeyStroke.getKeyStroke(keyCode, 0);
    inputMap.put(keyStroke, button);
    actionMap.put(button, new AbstractAction() {
        @Override
        public void actionPerformed(ActionEvent e) {
            Object source = e.getSource();
            
            if (source == jButton2) {
                // Call your clear logic here
                payment();
          
            }
            else if(source == jButton1){
            cancel();
            }
        }
    });    }
    
    private void cancel(){
    dispose();
    }
    private void payment(){
    
    
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

            try {
                Connection conn;
                ResultSet rs;
                com.mysql.jdbc.PreparedStatement stm;

                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql:///psystem", "root", "");

                String take = "SELECT * FROM pharmacists_inf WHERE PHAR_ID = ?";
                stm = (com.mysql.jdbc.PreparedStatement) conn.prepareStatement(take);
                stm.setString(1,PID.getText());
                rs = stm.executeQuery();

                PreparedStatement pstmt = conn.prepareStatement("INSERT INTO trans_history (PHAR_ID, PHAR_NAME, TRANS_DATE, TRANS_TIME, TOTAL_PRICE,TRANS_CASH ,TRANS_CHANGE) VALUES (?, ?, ?, ?, ?, ?, ?)");
                while (rs.next()) {
                    pstmt.setString(1, rs.getString("PHAR_ID"));
                    pstmt.setString(2, rs.getString("PHAR_FNAME")+"  "+rs.getString("PHAR_LNAME"));
                    pstmt.setDate(3, java.sql.Date.valueOf(LocalDate.now()));
                    pstmt.setTime(4, java.sql.Time.valueOf(LocalTime.now()));
                    pstmt.setString(5, tamount1.getText());
                    pstmt.setString(6, cash.getText());
                    pstmt.setString(7, change.getText());
                    pstmt.executeUpdate();
                }

                int columnIndex = 0;
                for (int i = 0; i < model.getRowCount(); i++) {
                    String id = model.getValueAt(i, columnIndex).toString();
                    String sql = "SELECT * FROM med_inventory WHERE MED_ID = ?";
                    stm = (com.mysql.jdbc.PreparedStatement) conn.prepareStatement(sql);
                    stm.setString(1, id);
                    rs = stm.executeQuery();

                    if (rs.next()) {
                        int availableQuantity = rs.getInt("MED_QUANTITY");
                        int requestedQuantity = Integer.parseInt(model.getValueAt(i, 1).toString());

                        if (requestedQuantity <= availableQuantity) {
                            String updateSql = "UPDATE med_inventory SET MED_QUANTITY = ? WHERE MED_ID = ?";
                            PreparedStatement updateStm = conn.prepareStatement(updateSql);
                            updateStm.setInt(1, availableQuantity - requestedQuantity);
                            updateStm.setString(2, id);
                            updateStm.executeUpdate();

                            int quantityRemaining = availableQuantity - requestedQuantity;

                            if (quantityRemaining == 0) {
                                String updateQuery = "UPDATE med_inventory SET MED_STATUS = 'Unavailable' WHERE MED_ID = ?";
                                PreparedStatement pst = conn.prepareStatement(updateQuery);
                                pst.setString(1, id);
                                pst.executeUpdate();
                            }

                            PreparedStatement insmed = conn.prepareStatement("INSERT INTO med_purchased (MED_ID, MED_NAME, QUANTITY, MED_PRICE, TRANS_ID) VALUES (?, ?, ?, ?, ?)");
                            rs.beforeFirst();
                            while (rs.next()) {
                                insmed.setString(1, rs.getString("MED_ID"));
                                insmed.setString(2, rs.getString("MED_NAME"));
                                insmed.setInt(3, requestedQuantity);
                                insmed.setString(4, rs.getString("MED_PRICE"));

                                String taketid = "SELECT * FROM trans_history WHERE TRANS_ID = (SELECT MAX(TRANS_ID) FROM trans_history)";
                                stm = (com.mysql.jdbc.PreparedStatement) conn.prepareStatement(taketid);
                                ResultSet rs2 = stm.executeQuery();
                                if (rs2.next()) {
                                    insmed.setString(5, rs2.getString("TRANS_ID"));
                                }

                                insmed.executeUpdate();
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Insufficient medicine " + id + " in inventory");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Medicine with ID " + id + " not found in inventory");
                    }
                }

                model.setRowCount(0);
                    dispose();
                new PH_RECEIPT().setVisible(true);

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e);
            }

            String sql = "SELECT * FROM pharmacists_inf WHERE PHAR_ID = ?";
            String getUserInfo = "SELECT * FROM pharmacists_inf WHERE PHAR_ID = ?";
            String insertActivity = "INSERT INTO activity_history (PHAR_ID, PHAR_USERNAME, PHAR_NAME, PHAR_POS, ACT_DATE, ACT_TIME, ACT_ACTION) VALUES (?,?,?,?,?,?,?)";

            try {
                

                Class.forName("com.mysql.jdbc.Driver");
                conn = DriverManager.getConnection("jdbc:mysql:///psystem", "root", "");
                stm = conn.prepareStatement(sql);
                stm.setString(1, PID.getText());
                rs = stm.executeQuery();

                    
                
                    if (rs.next()) {
                        String id = rs.getString("PHAR_ID");
                        String username = rs.getString("PHAR_USERNAME");
                        String fullName = rs.getString("PHAR_FNAME") + " " + rs.getString("PHAR_LNAME");
                        String position = rs.getString("PHAR_POS");

                        stm = conn.prepareStatement(insertActivity);
                        stm.setString(1, id);
                        stm.setString(2, username);
                        stm.setString(3, fullName);
                        stm.setString(4, position);
                        stm.setDate(5, java.sql.Date.valueOf(LocalDate.now()));
                        stm.setTime(6, java.sql.Time.valueOf(LocalTime.now()));
                        stm.setString(7, "Sold item from inventory");

                        int rowsInserted1 = stm.executeUpdate();

                    } else {
                        JOptionPane.showMessageDialog(null, "Error adding activity");
                    }
                
            }
             catch (SQLException ex) {
            Logger.getLogger(PH_PAYMENT.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PH_PAYMENT.class.getName()).log(Level.SEVERE, null, ex);
        }
    }                                        


    
     private void setupButtonShortcuts() {
        // Set up shortcut key bindings for each button
        setupButtonShortcut(jButton2, KeyEvent.VK_F2);//PAY
        setupButtonShortcut(jButton1, KeyEvent.VK_ESCAPE);
       
        // ... Set up shortcuts for other buttons
    }
    

    
    
    
    
    
    
    
    private void jButton2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jButton2KeyPressed

    }//GEN-LAST:event_jButton2KeyPressed

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_changeActionPerformed

    private void changeComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_changeComponentShown
        
    }//GEN-LAST:event_changeComponentShown

    private void cashKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cashKeyTyped
        
    }//GEN-LAST:event_cashKeyTyped

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel10MouseClicked
        setState(PH_RECEIPT.ICONIFIED);          // TODO add your handling code here:
    }//GEN-LAST:event_jLabel10MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
new PH_SELLER().setVisible(true);
       dispose();    // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PH_PAYMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PH_PAYMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PH_PAYMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PH_PAYMENT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PH_PAYMENT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField PID;
    private javax.swing.JTextField cash;
    private javax.swing.JTextField change;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField tamount1;
    // End of variables declaration//GEN-END:variables
}
